Go in Linux Desktop Environment

2015年4月
Tags: golang, deepin, DE, linux

夏彬 
武汉深之度
snyh@snyh.org


* Linux桌面环境

- Gnome (Gtk)
- KDE (Qt)
- Lxde (Gtk) LxQt(Qt5)
- Xfce (Gtk)
- DDE (Gtk)
- .......

* DE组件

- Windows Manager
- Input Method
- Launcher 
- Panel (dock)
- Session Manager
- Appearance
- Configure Modules
- many service daemon, like
  audio, network, volume, power, login
- Basic Applications
  Document Reader、Browser、File Manager
  

* Why golang?

- 简洁一致
- 开发效率与运行效率间的平衡
- 编译型语言相对来说更适合长期项目


* Question: DE是否应该努力追求本身独立?

- 可以跑在更多发行版上
- 更多的受众，更多的反馈

- 但DE最终会与底层服务甚至特定版进行交互，完全独立很难走到完美。
- 造成更多的开发包袱

Linux不会被统一,所以DE最好还是拥有更好的内聚性。

但应该打包更多的系统在一起, 从更多的地方优化用户体验，无折腾。

  基础文件系统 + 仓库 + DE + 软件商店(各种应用软件才是正常用户需要的,基础设施不应该放到用户面前)

相关实验性项目

  Gnome SDK + sandboxed appliations
  Deepin XX ?



* 遇到的问题

- 与其他组件的融合
- X11




* 解决方式

- using CGO to get anything
- Pure golang library



* CGO Tips 
- Go-C 
- C-Go
- struct
- array

* CGO Tips: Go call C functions && types convert

.play cgo.go

Easy to use. Just using the *C* pseudo package.

The code of glue-C is far less than perl、python ...

* CGO Tips: Even more convenient than C at make time

.play cgo_directive.go


* CGO Tips: Struct is also easy to use

.play cgo_struct.go

* CGO Tips: Passing array type is annoying

.play cgo_array.go

* CGO Tips: Passing array type is annoying

convert *****struct_tm* to ***[size]**C.struct_tm*

.play cgo_array_ok.go /func main/,/^}/

Why we choose *4* as the *array* *length*


* CGO Tips: Passing array type is annoying

In practice, the array length must be given at compile time.

we can simply use a larger one and make a slice value, like

    n := calacLength(C.tms)
    tms := (*[1<<12](*C.struct_tm))(unsafe.Pointer(C.tms))[:n:n]




* CGO Problems: We have more troubles

- GC
  C.free(unsafe.Pointer(foo)) // malloc and free

  foo.Ref() and foo.Unref() // C library reference system

ease the pain

  runtime.SetFinalizer(obj interface{}, finalizer interface{})

  runtime.GC()

- thread safe
  goroutine with GUI (main loop、work loop)

  goroutine with POSIX thread


* CGO: automatically generate code

.link http://www.swig.org/Doc2.0/Go.html swig

.link https://github.com/sbinet/go-cxxdict go-cxxdict

.link https://github.com/snyh/gir-generator gir-generator








* GIR: GObject Introspection repository (GIR)

The middleware layer between GObject libraries and language bindings.

After the first FooObject built, all C libraries which based on GObject
can be directly used by the Foo Language users.

The first guy in Golang is

.link https://github.com/nsf/gogobject nsf/gogobject 

the first line of _README_

  WARNING! This project is no longer maintained. Probably doesn't even compile.

And it's true. There has an workable and improved version.

.link https://github.com/snyh/gir-generator snyh/gir-generator


* GIR: How GIR does this ?

- They has defined a _IDL_ which is worked well with GObject.
- They offer the libgirepository.so to read the _IDL_ file.
- Using the information offered by _IDL_ file, you can communicate with any libraries based on GObject.

Bindings type
- static binding
- dynamic _binding_

* GIR: How many GIR libraries we can use?

    apt-file search /usr/lib/girepository-1.0/ | awk '{print $1}'  | uniq | wc
    171     171    3513

- gstreamer
- appindicator
- anjuta
- atspi
- clutter
- gudev
- webkit
- wnck
- freedesktop (freetype2、xlib、fontconfig、DBus、xrandr)
- all libraries based on GObject (use _g-ir-scanner_ to generate the IDL file)

* GIR: use gir udev to inspect device information

.play gudev.go

* GIR: create the new gudev binding in 5 minutes

.code gudev/config.json
.code gudev/gudev.go.in

and run

   gir-generator gudev.go.in

the result is an usable go package.






* Pure golang packages: 

X Go Binding

.link https://github.com/BurntSushi/xgb  xgb

native Go client bindings for D-Bus message bus system 

.link https://github.com/guelfey/go.dbus go.dbus

* What is D-Bus ?

- a message bus system. 
- advanced IPC
- support Method, Property and Signal
- support ACL
- automatically start services
- supported by GNOME, KDE, Systemd, upstart ... 

[[http://dbus.freedesktop.org][D-Bus FreeDesktop]]

others [[https://github.com/gregkh/kdbus][Kernel "dbus-like" code for the Linux kernel]]


* go-dbus: The Easy Frame-less D-Bus Go Interface

[[https://gitcafe.com/Deepin/go-lib/tree/master/dbus][go-dbus]] us go.dbus as transport layer.

- Automatically export Properties/Methods/Signals from Go to D-Bus.
- Automatically update property value with other system, like GSettings.


* go-dbus: example dbus-services, define service

.code dbus.go /type DService/,/}/

[[https://gitcafe.com/Deepin/go-lib/tree/master/dbus][go-dbus]] us go.dbus as transport layer.

* go-dbus: example dbus-services, install service

.code dbus.go /give the dbus/,/^}/
.play dbus.go /func main/,/^}/

* go-dbus: defect

- lost struct filed name (D-Bus caused)
- lost argument name (go-dbus caused)
  reflect package doesn't support query arguments name of a function at runtime.
  
Should we using _go_ _generate_ to generate stub code at build time ?


* dbus-generator: Generate D-Bus binding codes 

It can generate dbus-binding for QML/PyQt/Golang.

https://gowalker.org/github.com/linuxdeepin/go-dbus-generator

https://github.com/linuxdeepin/dbus-factory



* Other Go Project in Deepin

- deepin id (online services for linux Desktop)
- Go for [[https://github.com/emb-team/loongson-golang][loongson]]
- many IT infrastructures for internal use

* hack project

[[https://github.com/snyh/dui][dui]] 

- webkit without javascript runtime 
- golang play with DOM directly
- small memory footprint

* dui: How it look like ?

.play dui.go /hello/,/}\)/


* 湖北的同学们可以回家啦

*Go* to *武汉*


Deepin 武汉光谷金融港

http://deepin.org


[[https://github.com/snyh/slide/tree/master/gopherchina2015][Slide源码]]
