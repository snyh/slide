Go在深度桌面环境中的应用

linux Desktop Environment 开发
2015年4月
Tags: golang, deepin, dde, linux

夏彬
武汉深之度


* Linux桌面环境

- Gnome (Gtk)
- KDE (Qt)
- Lxde (Gtk) LxQt(Qt5)
- Xfce (Gtk)
- DDE (Gtk)
- .......

* DE组件

- Windows Manager
- Input Method
- Launcher 
- Panel (dock)
- Session Manager
- Appearance
- Configure Modules
- many service daemon, like
  audio, network, volume, power, login
- Basic Applications
  Document Reader、Browser、File Manager
  
* DE是否应该努力追求本身独立?

- 可以跑在更多发行版上
- 更多的受众，更多的反馈
- 但DE必定与底层服务甚至特定版，这条路很难走到完美。
- 造成更多的开发包袱

Linux不会被统一,所以DE最好还是拥有更好的内聚性。

但应该打包更多的系统在一起, 从更多的地方优化用户体验，无折腾。

  基础文件系统 + 仓库 + DE + 软件商店(各种应用软件才是正常用户需要的,基础设施不应该放到用户面前)

相关实验性项目

  Gnome SDK + sandboxed appliations
  Deepin XX ?

* Why golang?

- 简洁一致
- 开发效率与运行效率间的平衡
- 编译型语言相对来说更适合长期项目







* 遇到的问题

- 与其他组件的融合
- X11






* 解决方式

- using Cgo to get anything
- Pure golang library



* Cgo Tips 
- Go-C 
- C-Go
- array
- struct

* Cgo Tips: Go call C functions && types convert

.play cgo.go

Easy to use. Just using the *C* pseudo package.

The code of glue-C is far less than perl、python ...

* Cgo Tips: Even more convenient than C at make time

.play cgo_directive.go


* Cgo Tips: Struct is also easy to use

.play cgo_struct.go

* Cgo Tips: But struct of array is annoying

.play cgo_array.go

* Cgo Tips: But struct of array is annoying

convert *****struct_tm* to ***[size]**C.struct_tm*

.play cgo_array_ok.go /func main/,/^}/

Why we choose *4* as the *array* *length*


* Cgo Tips: But struct of array is annoying

In practice, the array length must be given at compile time.

we can simply use a larger one and make a slice value, like

    n := calacLength(C.tms)
    tms := (*[1<<12](*C.struct_tm))(unsafe.Pointer(C.tms))[:n:n]

Sadly, we are torn between "wasting stack memory" and "safety".

The solution?

- cache manager, dynamicly choose different arrays
- write helper function in C



* Cgo Problems: We have more troubles

- GC
  C.free(unsafe.Pointer(foo)) // malloc and free

  foo.Ref() and foo.Unref() // C library reference system

ease the pain

  runtime.SetFinalizer(obj interface{}, finalizer interface{})

  runtime.GC()

- thread safe
  goroutine with GUI (main loop、work loop)

  goroutine with POSIX thread











* Cgo Next Step: GObject Introspection repository (GIR)

The middleware layer between GObject libraries and language bindings.

It's means when some guy built the first FooObject, then all C libraries which based on GObject
can be directly used by the Foo Language users.

The first guy in Golang is

.link https://github.com/nsf/gogobject nsf/gogobject 

the first line of _README_

  WARNING! This project is no longer maintained. Probably doesn't even compile.

And it's true. There has an workable and improved version.

.link https://github.com/snyh/gir-generator snyh/gir-generator


* GIR: How GIR does this ?

- They has defined a _IDL_ which is worked well with GObject.
- They offer the libgirepository.so to read the _IDL_ file.
- Using the information offered by _IDL_ file, you can communicate with any libraries based on GObject.

Bindings type
- static binding
- dynamic _binding_

* GIR: How many GIR libraries we can use?

    apt-file search /usr/lib/girepository-1.0/ | awk '{print $1}'  | uniq | wc
    171     171    3513

- gstreamer
- appindicator
- anjuta
- atspi
- clutter
- gudev
- webkit
- wnck
- freedesktop (freetype2、xlib、fontconfig、DBus、xrandr)
- all libraries based on GObject (use _g-ir-scanner_ to generate the IDL file)

* GIR: use gir udev to inspect device information

.play gudev.go

* GIR: create the new gudev binding in 5 minutes

.code gudev/config.json
.code gudev/gudev.go.in

and run

   gir-generator gudev.go.in

the result is an usable go package.






* pure golang library next step

- xgb
- go.dbus
- nodejs-x11

- golang调用C库
- C代码调用go代码
- golang编写.so动态库

 udev networkmanager udisk

* golang in DDE 

- all DE component daemons

* Other golang project

- deepin id (online services for linux Desktop)
- golang for loongson https://github.com/emb-team/loongson-golang
- many IT infrastructures for internal use

* hack project
- webkit without javascript runtime 
- golang play with DOM directly
